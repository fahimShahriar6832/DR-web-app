# -*- coding: utf-8 -*-
"""Image predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PUZymkZJTm6zzCqFrnqdaAOSwZAnwjL-
"""

#from tensorflow import keras
import numpy as np
import streamlit as st
import pandas as pd
from PIL import Image
#import tensorflow_hub as hub
#import matplotlib.pyplot as plt
import tensorflow as tf
from keras import preprocessing


st.header("Image Predictor")

def main():
  file_uploaded = st.file_uploader("Upload Query image", type = ['jpg','png','jpeg'])
  if file_uploaded is not None:
    image = Image.open(file_uploaded)
   # plt.imshow(image)
    #plt.axis('off')


def predict_class(image):
  classifier_model = tf.keras.models.load_model('/DR_VGG19.h5')#Give the model path
  shape = ((224,224,3))#Give the shape
  model = tf.keras.Sequential(hub[hub.KerasLayer(classifier_model,input_shape = shape)])
  test_image = image.resize((224,224))
  test_image = preprocessing.image.img_to_array(test_image)
  test_image = test_image/255
  test_image = np.expand_dims(test_image, axis = 0)
  result = model.predict(test_image) 

  if result[0][0] > result[0][1]:
    print("Diabetic Retinopathy [{:.2f}% accuracy]".format((result[0][0]*100)))
  else:
    print("NO Diabetic Retinopathy [{:.2f}% accuracy]".format((result[0][1])*100))


if __name__ == "__main__":
  main()
